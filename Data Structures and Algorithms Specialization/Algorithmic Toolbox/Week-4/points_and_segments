points_and_segments

C++ Code
----------------------------------

#include <bits/stdc++.h>

using namespace std;
typedef pair<int, int> ii;

vector<int> fast_count_segments(vector<int> starts, vector<int> ends, vector<int> points)
{
  vector<int> cnt(points.size());
  int m = points.size(), n = starts.size(), i, count = 0, x;
  unordered_map<int, int> counter;
  vector<ii> segs;
  for (i = 0; i < m; i++)
  {
    segs.push_back({points[i], 1});
  }

  for (i = 0; i < n; i++)
  {
    segs.push_back({starts[i], 0});
    segs.push_back({ends[i], 2});
  }
  sort(segs.begin(), segs.end());
  for (i = 0; i < segs.size(); i++)
  {
    x = segs[i].first;
    if (segs[i].second == 1)
      counter[x] = count;
    else if (segs[i].second == 0)
      count++;
    else
      count--;
  }

  for (i = 0; i < points.size(); i++)
  {
    cnt[i] = counter[points[i]];
  }
  return cnt;
}

vector<int> naive_count_segments(vector<int> starts, vector<int> ends, vector<int> points)
{
  vector<int> cnt(points.size());
  for (size_t i = 0; i < points.size(); i++)
  {
    for (size_t j = 0; j < starts.size(); j++)
    {
      cnt[i] += starts[j] <= points[i] && points[i] <= ends[j];
    }
  }
  return cnt;
}

int main()
{
  int n, m;
  std::cin >> n >> m;
  vector<int> starts(n), ends(n);
  for (size_t i = 0; i < starts.size(); i++)
  {
    std::cin >> starts[i] >> ends[i];
  }
  vector<int> points(m);
  for (size_t i = 0; i < points.size(); i++)
  {
    std::cin >> points[i];
  }
  // use fast_count_segments
  vector<int> cnt = fast_count_segments(starts, ends, points);
  for (size_t i = 0; i < cnt.size(); i++)
  {
    std::cout << cnt[i] << ' ';
  }
}
