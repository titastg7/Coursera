build_heap

C++ Code
----------------------------------

#include <bits/stdc++.h>

using namespace std;

class HeapBuilder
{
private:
  vector<int> data_;
  vector<pair<int, int>> swaps_;

  void WriteResponse() const
  {
    cout << swaps_.size() << "\n";
    for (int i = 0; i < swaps_.size(); ++i)
    {
      cout << swaps_[i].first << " " << swaps_[i].second << "\n";
    }
  }

  void ReadData()
  {
    int n;
    cin >> n;
    data_.resize(n);
    for (int i = 0; i < n; ++i)
      cin >> data_[i];
  }

  void BuildHeap()
  {
    int n = data_.size(), right, left;
    bool isSwapped = true;
    while (isSwapped)
    {
      isSwapped = 0;
      for (int i = (n / 2) - 1; i >= 0; i--)
      {
        left = 2 * i + 1;
        right = 2 * i + 2;
        int swappedInd = i;
        if (left < n && data_[swappedInd] > data_[left])
          swappedInd = left;
        if (right < n && data_[right] < data_[swappedInd])
          swappedInd = right;
        if (swappedInd != i)
        {
          swaps_.push_back({i, swappedInd});
          swap(data_[i], data_[swappedInd]);
          isSwapped = 1;
          // print();
        }
      }
    }
  }
  void print()
  {
    int i, n = data_.size();
    cout << " Data = ";
    for (auto e : data_)
      cout << e << " ";
    cout << endl;
  }

public:
  void Solve()
  {
    ReadData();
    BuildHeap();
    WriteResponse();
  }
};

int main()
{
  std::ios_base::sync_with_stdio(false);
  HeapBuilder heap_builder;
  heap_builder.Solve();
  return 0;
}
