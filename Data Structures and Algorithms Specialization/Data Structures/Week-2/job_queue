job_queue

C++ Code
----------------------------------

#include <bits/stdc++.h>

using namespace std;
typedef pair<long, long> ii;
class JobQueue
{
private:
    int num_workers_;
    vector<int> jobs_;

    vector<int> assigned_workers_;
    vector<long long> start_times_;

    void WriteResponse() const
    {
        for (int i = 0; i < jobs_.size(); ++i)
        {
            cout << assigned_workers_[i] << " " << start_times_[i] << "\n";
        }
    }

    void ReadData()
    {
        int m;
        cin >> num_workers_ >> m;
        jobs_.resize(m);
        for (int i = 0; i < m; ++i)
            cin >> jobs_[i];
    }

    void AssignJobs()
    {
        // tracker element : <finishTime,workerid >
        // finishTime = currentTime+requiredTime

        int curTime = 0, n = jobs_.size(), j = 0, threadId;
        priority_queue<ii, vector<ii>, greater<ii>> tracker;
        while (j < n && j < num_workers_)
        {
            assigned_workers_.push_back(j);
            start_times_.push_back(0);
            tracker.push({jobs_[j], j});
            j++;
        }
        while (j < n)
        {
            curTime = tracker.top().first;
            threadId = tracker.top().second;
            tracker.pop();
            cout << curTime << " ";
            assigned_workers_.push_back(threadId);
            start_times_.push_back(curTime);
            tracker.push({curTime + jobs_[j], threadId});
            j++;
        }
    }

public:
    void Solve()
    {
        ReadData();
        AssignJobs();
        WriteResponse();
    }
};

int main()
{
    std::ios_base::sync_with_stdio(false);
    JobQueue job_queue;
    job_queue.Solve();
    return 0;
}
