max_sliding_window

C++ Code
----------------------------------

#include <bits/stdc++.h>

using namespace std;

void max_sliding_window_naive(vector<int> const &A, int w)
{
    for (size_t i = 0; i < A.size() - w + 1; ++i)
    {
        int window_max = A.at(i);
        for (size_t j = i + 1; j < i + w; ++j)
            window_max = max(window_max, A.at(j));

        cout << window_max << " ";
    }

    return;
}

void max_sliding_window_optimized(vector<int> const &A, int w)
{
    int n = A.size(), i;
    deque<int> maxElement;
    vector<int> result;

    for (i = 0; i < w; i++)
    {
        if (maxElement.empty())
            maxElement.push_back(i);
        else
        {
            while (!maxElement.empty() && A[maxElement.back()] < A[i])
                maxElement.pop_back();
            maxElement.push_back(i);
        }
    }

    result.push_back(A[maxElement.front()]);
    for (; i < n; i++)
    {
        while (!maxElement.empty() && maxElement.front() <= (i - w))
            maxElement.pop_front();
        while (!maxElement.empty() && A[maxElement.back()] < A[i])
            maxElement.pop_back();
        maxElement.push_back(i);
        result.push_back(A[maxElement.front()]);
    }

    for (i = 0; i < result.size(); i++)
        cout << result[i] << " ";
    return;
}

int main()
{
    int n = 0;
    cin >> n;

    vector<int> A(n);
    for (size_t i = 0; i < n; ++i)
        cin >> A.at(i);

    int w = 0;
    cin >> w;

    max_sliding_window_naive(A, w);

    return 0;
}
